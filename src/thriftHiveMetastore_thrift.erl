%%
%% Autogenerated by Thrift Compiler (0.9.0)
%%
%% DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
%%

-module(thriftHiveMetastore_thrift).
-behaviour(thrift_service).


-include("thriftHiveMetastore_thrift.hrl").

-export([struct_info/1, function_info/2]).

struct_info('i am a dummy struct') -> undefined.
%%% interface
% create_database(This, Database)
function_info('create_database', params_type) ->
  {struct, [{1, {struct, {'hive_metastore_types', 'database'}}}]}
;
function_info('create_database', reply_type) ->
  {struct, []};
function_info('create_database', exceptions) ->
  {struct, [{1, {struct, {'hive_metastore_types', 'alreadyExistsException'}}},
          {2, {struct, {'hive_metastore_types', 'invalidObjectException'}}},
          {3, {struct, {'hive_metastore_types', 'metaException'}}}]}
;
% get_database(This, Name)
function_info('get_database', params_type) ->
  {struct, [{1, string}]}
;
function_info('get_database', reply_type) ->
  {struct, {'hive_metastore_types', 'database'}};
function_info('get_database', exceptions) ->
  {struct, [{1, {struct, {'hive_metastore_types', 'noSuchObjectException'}}},
          {2, {struct, {'hive_metastore_types', 'metaException'}}}]}
;
% drop_database(This, Name, DeleteData)
function_info('drop_database', params_type) ->
  {struct, [{1, string},
          {2, bool}]}
;
function_info('drop_database', reply_type) ->
  {struct, []};
function_info('drop_database', exceptions) ->
  {struct, [{1, {struct, {'hive_metastore_types', 'noSuchObjectException'}}},
          {2, {struct, {'hive_metastore_types', 'invalidOperationException'}}},
          {3, {struct, {'hive_metastore_types', 'metaException'}}}]}
;
% get_databases(This, Pattern)
function_info('get_databases', params_type) ->
  {struct, [{1, string}]}
;
function_info('get_databases', reply_type) ->
  {list, string};
function_info('get_databases', exceptions) ->
  {struct, [{1, {struct, {'hive_metastore_types', 'metaException'}}}]}
;
% get_all_databases(This)
function_info('get_all_databases', params_type) ->
  {struct, []}
;
function_info('get_all_databases', reply_type) ->
  {list, string};
function_info('get_all_databases', exceptions) ->
  {struct, [{1, {struct, {'hive_metastore_types', 'metaException'}}}]}
;
% alter_database(This, Dbname, Db)
function_info('alter_database', params_type) ->
  {struct, [{1, string},
          {2, {struct, {'hive_metastore_types', 'database'}}}]}
;
function_info('alter_database', reply_type) ->
  {struct, []};
function_info('alter_database', exceptions) ->
  {struct, [{1, {struct, {'hive_metastore_types', 'metaException'}}},
          {2, {struct, {'hive_metastore_types', 'noSuchObjectException'}}}]}
;
% get_type(This, Name)
function_info('get_type', params_type) ->
  {struct, [{1, string}]}
;
function_info('get_type', reply_type) ->
  {struct, {'hive_metastore_types', 'type'}};
function_info('get_type', exceptions) ->
  {struct, [{1, {struct, {'hive_metastore_types', 'metaException'}}},
          {2, {struct, {'hive_metastore_types', 'noSuchObjectException'}}}]}
;
% create_type(This, Type)
function_info('create_type', params_type) ->
  {struct, [{1, {struct, {'hive_metastore_types', 'type'}}}]}
;
function_info('create_type', reply_type) ->
  bool;
function_info('create_type', exceptions) ->
  {struct, [{1, {struct, {'hive_metastore_types', 'alreadyExistsException'}}},
          {2, {struct, {'hive_metastore_types', 'invalidObjectException'}}},
          {3, {struct, {'hive_metastore_types', 'metaException'}}}]}
;
% drop_type(This, Type)
function_info('drop_type', params_type) ->
  {struct, [{1, string}]}
;
function_info('drop_type', reply_type) ->
  bool;
function_info('drop_type', exceptions) ->
  {struct, [{1, {struct, {'hive_metastore_types', 'metaException'}}},
          {2, {struct, {'hive_metastore_types', 'noSuchObjectException'}}}]}
;
% get_type_all(This, Name)
function_info('get_type_all', params_type) ->
  {struct, [{1, string}]}
;
function_info('get_type_all', reply_type) ->
  {map, string, {struct, {'hive_metastore_types', 'type'}}};
function_info('get_type_all', exceptions) ->
  {struct, [{1, {struct, {'hive_metastore_types', 'metaException'}}}]}
;
% get_fields(This, Db_name, Table_name)
function_info('get_fields', params_type) ->
  {struct, [{1, string},
          {2, string}]}
;
function_info('get_fields', reply_type) ->
  {list, {struct, {'hive_metastore_types', 'fieldSchema'}}};
function_info('get_fields', exceptions) ->
  {struct, [{1, {struct, {'hive_metastore_types', 'metaException'}}},
          {2, {struct, {'hive_metastore_types', 'unknownTableException'}}},
          {3, {struct, {'hive_metastore_types', 'unknownDBException'}}}]}
;
% get_schema(This, Db_name, Table_name)
function_info('get_schema', params_type) ->
  {struct, [{1, string},
          {2, string}]}
;
function_info('get_schema', reply_type) ->
  {list, {struct, {'hive_metastore_types', 'fieldSchema'}}};
function_info('get_schema', exceptions) ->
  {struct, [{1, {struct, {'hive_metastore_types', 'metaException'}}},
          {2, {struct, {'hive_metastore_types', 'unknownTableException'}}},
          {3, {struct, {'hive_metastore_types', 'unknownDBException'}}}]}
;
% create_table(This, Tbl)
function_info('create_table', params_type) ->
  {struct, [{1, {struct, {'hive_metastore_types', 'table'}}}]}
;
function_info('create_table', reply_type) ->
  {struct, []};
function_info('create_table', exceptions) ->
  {struct, [{1, {struct, {'hive_metastore_types', 'alreadyExistsException'}}},
          {2, {struct, {'hive_metastore_types', 'invalidObjectException'}}},
          {3, {struct, {'hive_metastore_types', 'metaException'}}},
          {4, {struct, {'hive_metastore_types', 'noSuchObjectException'}}}]}
;
% drop_table(This, Dbname, Name, DeleteData)
function_info('drop_table', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, bool}]}
;
function_info('drop_table', reply_type) ->
  {struct, []};
function_info('drop_table', exceptions) ->
  {struct, [{1, {struct, {'hive_metastore_types', 'noSuchObjectException'}}},
          {2, {struct, {'hive_metastore_types', 'metaException'}}}]}
;
% get_tables(This, Db_name, Pattern)
function_info('get_tables', params_type) ->
  {struct, [{1, string},
          {2, string}]}
;
function_info('get_tables', reply_type) ->
  {list, string};
function_info('get_tables', exceptions) ->
  {struct, [{1, {struct, {'hive_metastore_types', 'metaException'}}}]}
;
% get_all_tables(This, Db_name)
function_info('get_all_tables', params_type) ->
  {struct, [{1, string}]}
;
function_info('get_all_tables', reply_type) ->
  {list, string};
function_info('get_all_tables', exceptions) ->
  {struct, [{1, {struct, {'hive_metastore_types', 'metaException'}}}]}
;
% get_table(This, Dbname, Tbl_name)
function_info('get_table', params_type) ->
  {struct, [{1, string},
          {2, string}]}
;
function_info('get_table', reply_type) ->
  {struct, {'hive_metastore_types', 'table'}};
function_info('get_table', exceptions) ->
  {struct, [{1, {struct, {'hive_metastore_types', 'metaException'}}},
          {2, {struct, {'hive_metastore_types', 'noSuchObjectException'}}}]}
;
% alter_table(This, Dbname, Tbl_name, New_tbl)
function_info('alter_table', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, {struct, {'hive_metastore_types', 'table'}}}]}
;
function_info('alter_table', reply_type) ->
  {struct, []};
function_info('alter_table', exceptions) ->
  {struct, [{1, {struct, {'hive_metastore_types', 'invalidOperationException'}}},
          {2, {struct, {'hive_metastore_types', 'metaException'}}}]}
;
% add_partition(This, New_part)
function_info('add_partition', params_type) ->
  {struct, [{1, {struct, {'hive_metastore_types', 'partition'}}}]}
;
function_info('add_partition', reply_type) ->
  {struct, {'hive_metastore_types', 'partition'}};
function_info('add_partition', exceptions) ->
  {struct, [{1, {struct, {'hive_metastore_types', 'invalidObjectException'}}},
          {2, {struct, {'hive_metastore_types', 'alreadyExistsException'}}},
          {3, {struct, {'hive_metastore_types', 'metaException'}}}]}
;
% append_partition(This, Db_name, Tbl_name, Part_vals)
function_info('append_partition', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, {list, string}}]}
;
function_info('append_partition', reply_type) ->
  {struct, {'hive_metastore_types', 'partition'}};
function_info('append_partition', exceptions) ->
  {struct, [{1, {struct, {'hive_metastore_types', 'invalidObjectException'}}},
          {2, {struct, {'hive_metastore_types', 'alreadyExistsException'}}},
          {3, {struct, {'hive_metastore_types', 'metaException'}}}]}
;
% append_partition_by_name(This, Db_name, Tbl_name, Part_name)
function_info('append_partition_by_name', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, string}]}
;
function_info('append_partition_by_name', reply_type) ->
  {struct, {'hive_metastore_types', 'partition'}};
function_info('append_partition_by_name', exceptions) ->
  {struct, [{1, {struct, {'hive_metastore_types', 'invalidObjectException'}}},
          {2, {struct, {'hive_metastore_types', 'alreadyExistsException'}}},
          {3, {struct, {'hive_metastore_types', 'metaException'}}}]}
;
% drop_partition(This, Db_name, Tbl_name, Part_vals, DeleteData)
function_info('drop_partition', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, {list, string}},
          {4, bool}]}
;
function_info('drop_partition', reply_type) ->
  bool;
function_info('drop_partition', exceptions) ->
  {struct, [{1, {struct, {'hive_metastore_types', 'noSuchObjectException'}}},
          {2, {struct, {'hive_metastore_types', 'metaException'}}}]}
;
% drop_partition_by_name(This, Db_name, Tbl_name, Part_name, DeleteData)
function_info('drop_partition_by_name', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, string},
          {4, bool}]}
;
function_info('drop_partition_by_name', reply_type) ->
  bool;
function_info('drop_partition_by_name', exceptions) ->
  {struct, [{1, {struct, {'hive_metastore_types', 'noSuchObjectException'}}},
          {2, {struct, {'hive_metastore_types', 'metaException'}}}]}
;
% get_partition(This, Db_name, Tbl_name, Part_vals)
function_info('get_partition', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, {list, string}}]}
;
function_info('get_partition', reply_type) ->
  {struct, {'hive_metastore_types', 'partition'}};
function_info('get_partition', exceptions) ->
  {struct, [{1, {struct, {'hive_metastore_types', 'metaException'}}},
          {2, {struct, {'hive_metastore_types', 'noSuchObjectException'}}}]}
;
% get_partition_with_auth(This, Db_name, Tbl_name, Part_vals, User_name, Group_names)
function_info('get_partition_with_auth', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, {list, string}},
          {4, string},
          {5, {list, string}}]}
;
function_info('get_partition_with_auth', reply_type) ->
  {struct, {'hive_metastore_types', 'partition'}};
function_info('get_partition_with_auth', exceptions) ->
  {struct, [{1, {struct, {'hive_metastore_types', 'metaException'}}},
          {2, {struct, {'hive_metastore_types', 'noSuchObjectException'}}}]}
;
% get_partition_by_name(This, Db_name, Tbl_name, Part_name)
function_info('get_partition_by_name', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, string}]}
;
function_info('get_partition_by_name', reply_type) ->
  {struct, {'hive_metastore_types', 'partition'}};
function_info('get_partition_by_name', exceptions) ->
  {struct, [{1, {struct, {'hive_metastore_types', 'metaException'}}},
          {2, {struct, {'hive_metastore_types', 'noSuchObjectException'}}}]}
;
% get_partitions(This, Db_name, Tbl_name, Max_parts)
function_info('get_partitions', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, i16}]}
;
function_info('get_partitions', reply_type) ->
  {list, {struct, {'hive_metastore_types', 'partition'}}};
function_info('get_partitions', exceptions) ->
  {struct, [{1, {struct, {'hive_metastore_types', 'noSuchObjectException'}}},
          {2, {struct, {'hive_metastore_types', 'metaException'}}}]}
;
% get_partitions_with_auth(This, Db_name, Tbl_name, Max_parts, User_name, Group_names)
function_info('get_partitions_with_auth', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, i16},
          {4, string},
          {5, {list, string}}]}
;
function_info('get_partitions_with_auth', reply_type) ->
  {list, {struct, {'hive_metastore_types', 'partition'}}};
function_info('get_partitions_with_auth', exceptions) ->
  {struct, [{1, {struct, {'hive_metastore_types', 'noSuchObjectException'}}},
          {2, {struct, {'hive_metastore_types', 'metaException'}}}]}
;
% get_partition_names(This, Db_name, Tbl_name, Max_parts)
function_info('get_partition_names', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, i16}]}
;
function_info('get_partition_names', reply_type) ->
  {list, string};
function_info('get_partition_names', exceptions) ->
  {struct, [{1, {struct, {'hive_metastore_types', 'metaException'}}}]}
;
% get_partitions_ps(This, Db_name, Tbl_name, Part_vals, Max_parts)
function_info('get_partitions_ps', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, {list, string}},
          {4, i16}]}
;
function_info('get_partitions_ps', reply_type) ->
  {list, {struct, {'hive_metastore_types', 'partition'}}};
function_info('get_partitions_ps', exceptions) ->
  {struct, [{1, {struct, {'hive_metastore_types', 'metaException'}}}]}
;
% get_partitions_ps_with_auth(This, Db_name, Tbl_name, Part_vals, Max_parts, User_name, Group_names)
function_info('get_partitions_ps_with_auth', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, {list, string}},
          {4, i16},
          {5, string},
          {6, {list, string}}]}
;
function_info('get_partitions_ps_with_auth', reply_type) ->
  {list, {struct, {'hive_metastore_types', 'partition'}}};
function_info('get_partitions_ps_with_auth', exceptions) ->
  {struct, [{1, {struct, {'hive_metastore_types', 'noSuchObjectException'}}},
          {2, {struct, {'hive_metastore_types', 'metaException'}}}]}
;
% get_partition_names_ps(This, Db_name, Tbl_name, Part_vals, Max_parts)
function_info('get_partition_names_ps', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, {list, string}},
          {4, i16}]}
;
function_info('get_partition_names_ps', reply_type) ->
  {list, string};
function_info('get_partition_names_ps', exceptions) ->
  {struct, [{1, {struct, {'hive_metastore_types', 'metaException'}}}]}
;
% get_partitions_by_filter(This, Db_name, Tbl_name, Filter, Max_parts)
function_info('get_partitions_by_filter', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, string},
          {4, i16}]}
;
function_info('get_partitions_by_filter', reply_type) ->
  {list, {struct, {'hive_metastore_types', 'partition'}}};
function_info('get_partitions_by_filter', exceptions) ->
  {struct, [{1, {struct, {'hive_metastore_types', 'metaException'}}},
          {2, {struct, {'hive_metastore_types', 'noSuchObjectException'}}}]}
;
% alter_partition(This, Db_name, Tbl_name, New_part)
function_info('alter_partition', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, {struct, {'hive_metastore_types', 'partition'}}}]}
;
function_info('alter_partition', reply_type) ->
  {struct, []};
function_info('alter_partition', exceptions) ->
  {struct, [{1, {struct, {'hive_metastore_types', 'invalidOperationException'}}},
          {2, {struct, {'hive_metastore_types', 'metaException'}}}]}
;
% get_config_value(This, Name, DefaultValue)
function_info('get_config_value', params_type) ->
  {struct, [{1, string},
          {2, string}]}
;
function_info('get_config_value', reply_type) ->
  string;
function_info('get_config_value', exceptions) ->
  {struct, [{1, {struct, {'hive_metastore_types', 'configValSecurityException'}}}]}
;
% partition_name_to_vals(This, Part_name)
function_info('partition_name_to_vals', params_type) ->
  {struct, [{1, string}]}
;
function_info('partition_name_to_vals', reply_type) ->
  {list, string};
function_info('partition_name_to_vals', exceptions) ->
  {struct, [{1, {struct, {'hive_metastore_types', 'metaException'}}}]}
;
% partition_name_to_spec(This, Part_name)
function_info('partition_name_to_spec', params_type) ->
  {struct, [{1, string}]}
;
function_info('partition_name_to_spec', reply_type) ->
  {map, string, string};
function_info('partition_name_to_spec', exceptions) ->
  {struct, [{1, {struct, {'hive_metastore_types', 'metaException'}}}]}
;
% add_index(This, New_index, Index_table)
function_info('add_index', params_type) ->
  {struct, [{1, {struct, {'hive_metastore_types', 'index'}}},
          {2, {struct, {'hive_metastore_types', 'table'}}}]}
;
function_info('add_index', reply_type) ->
  {struct, {'hive_metastore_types', 'index'}};
function_info('add_index', exceptions) ->
  {struct, [{1, {struct, {'hive_metastore_types', 'invalidObjectException'}}},
          {2, {struct, {'hive_metastore_types', 'alreadyExistsException'}}},
          {3, {struct, {'hive_metastore_types', 'metaException'}}}]}
;
% alter_index(This, Dbname, Base_tbl_name, Idx_name, New_idx)
function_info('alter_index', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, string},
          {4, {struct, {'hive_metastore_types', 'index'}}}]}
;
function_info('alter_index', reply_type) ->
  {struct, []};
function_info('alter_index', exceptions) ->
  {struct, [{1, {struct, {'hive_metastore_types', 'invalidOperationException'}}},
          {2, {struct, {'hive_metastore_types', 'metaException'}}}]}
;
% drop_index_by_name(This, Db_name, Tbl_name, Index_name, DeleteData)
function_info('drop_index_by_name', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, string},
          {4, bool}]}
;
function_info('drop_index_by_name', reply_type) ->
  bool;
function_info('drop_index_by_name', exceptions) ->
  {struct, [{1, {struct, {'hive_metastore_types', 'noSuchObjectException'}}},
          {2, {struct, {'hive_metastore_types', 'metaException'}}}]}
;
% get_index_by_name(This, Db_name, Tbl_name, Index_name)
function_info('get_index_by_name', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, string}]}
;
function_info('get_index_by_name', reply_type) ->
  {struct, {'hive_metastore_types', 'index'}};
function_info('get_index_by_name', exceptions) ->
  {struct, [{1, {struct, {'hive_metastore_types', 'metaException'}}},
          {2, {struct, {'hive_metastore_types', 'noSuchObjectException'}}}]}
;
% get_indexes(This, Db_name, Tbl_name, Max_indexes)
function_info('get_indexes', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, i16}]}
;
function_info('get_indexes', reply_type) ->
  {list, {struct, {'hive_metastore_types', 'index'}}};
function_info('get_indexes', exceptions) ->
  {struct, [{1, {struct, {'hive_metastore_types', 'noSuchObjectException'}}},
          {2, {struct, {'hive_metastore_types', 'metaException'}}}]}
;
% get_index_names(This, Db_name, Tbl_name, Max_indexes)
function_info('get_index_names', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, i16}]}
;
function_info('get_index_names', reply_type) ->
  {list, string};
function_info('get_index_names', exceptions) ->
  {struct, [{1, {struct, {'hive_metastore_types', 'metaException'}}}]}
;
% create_role(This, Role)
function_info('create_role', params_type) ->
  {struct, [{1, {struct, {'hive_metastore_types', 'role'}}}]}
;
function_info('create_role', reply_type) ->
  bool;
function_info('create_role', exceptions) ->
  {struct, [{1, {struct, {'hive_metastore_types', 'metaException'}}}]}
;
% drop_role(This, Role_name)
function_info('drop_role', params_type) ->
  {struct, [{1, string}]}
;
function_info('drop_role', reply_type) ->
  bool;
function_info('drop_role', exceptions) ->
  {struct, [{1, {struct, {'hive_metastore_types', 'metaException'}}}]}
;
% get_role_names(This)
function_info('get_role_names', params_type) ->
  {struct, []}
;
function_info('get_role_names', reply_type) ->
  {list, string};
function_info('get_role_names', exceptions) ->
  {struct, [{1, {struct, {'hive_metastore_types', 'metaException'}}}]}
;
% grant_role(This, Role_name, Principal_name, Principal_type, Grantor, GrantorType, Grant_option)
function_info('grant_role', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, i32},
          {4, string},
          {5, i32},
          {6, bool}]}
;
function_info('grant_role', reply_type) ->
  bool;
function_info('grant_role', exceptions) ->
  {struct, [{1, {struct, {'hive_metastore_types', 'metaException'}}}]}
;
% revoke_role(This, Role_name, Principal_name, Principal_type)
function_info('revoke_role', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, i32}]}
;
function_info('revoke_role', reply_type) ->
  bool;
function_info('revoke_role', exceptions) ->
  {struct, [{1, {struct, {'hive_metastore_types', 'metaException'}}}]}
;
% list_roles(This, Principal_name, Principal_type)
function_info('list_roles', params_type) ->
  {struct, [{1, string},
          {2, i32}]}
;
function_info('list_roles', reply_type) ->
  {list, {struct, {'hive_metastore_types', 'role'}}};
function_info('list_roles', exceptions) ->
  {struct, [{1, {struct, {'hive_metastore_types', 'metaException'}}}]}
;
% get_privilege_set(This, HiveObject, User_name, Group_names)
function_info('get_privilege_set', params_type) ->
  {struct, [{1, {struct, {'hive_metastore_types', 'hiveObjectRef'}}},
          {2, string},
          {3, {list, string}}]}
;
function_info('get_privilege_set', reply_type) ->
  {struct, {'hive_metastore_types', 'principalPrivilegeSet'}};
function_info('get_privilege_set', exceptions) ->
  {struct, [{1, {struct, {'hive_metastore_types', 'metaException'}}}]}
;
% list_privileges(This, Principal_name, Principal_type, HiveObject)
function_info('list_privileges', params_type) ->
  {struct, [{1, string},
          {2, i32},
          {3, {struct, {'hive_metastore_types', 'hiveObjectRef'}}}]}
;
function_info('list_privileges', reply_type) ->
  {list, {struct, {'hive_metastore_types', 'hiveObjectPrivilege'}}};
function_info('list_privileges', exceptions) ->
  {struct, [{1, {struct, {'hive_metastore_types', 'metaException'}}}]}
;
% grant_privileges(This, Privileges)
function_info('grant_privileges', params_type) ->
  {struct, [{1, {struct, {'hive_metastore_types', 'privilegeBag'}}}]}
;
function_info('grant_privileges', reply_type) ->
  bool;
function_info('grant_privileges', exceptions) ->
  {struct, [{1, {struct, {'hive_metastore_types', 'metaException'}}}]}
;
% revoke_privileges(This, Privileges)
function_info('revoke_privileges', params_type) ->
  {struct, [{1, {struct, {'hive_metastore_types', 'privilegeBag'}}}]}
;
function_info('revoke_privileges', reply_type) ->
  bool;
function_info('revoke_privileges', exceptions) ->
  {struct, [{1, {struct, {'hive_metastore_types', 'metaException'}}}]}
;
% get_delegation_token(This, Renewer_kerberos_principal_name)
function_info('get_delegation_token', params_type) ->
  {struct, [{1, string}]}
;
function_info('get_delegation_token', reply_type) ->
  string;
function_info('get_delegation_token', exceptions) ->
  {struct, [{1, {struct, {'hive_metastore_types', 'metaException'}}}]}
;
% get_delegation_token_with_signature(This, Renewer_kerberos_principal_name, Token_signature)
function_info('get_delegation_token_with_signature', params_type) ->
  {struct, [{1, string},
          {2, string}]}
;
function_info('get_delegation_token_with_signature', reply_type) ->
  string;
function_info('get_delegation_token_with_signature', exceptions) ->
  {struct, [{1, {struct, {'hive_metastore_types', 'metaException'}}}]}
;
% renew_delegation_token(This, Token_str_form)
function_info('renew_delegation_token', params_type) ->
  {struct, [{1, string}]}
;
function_info('renew_delegation_token', reply_type) ->
  i64;
function_info('renew_delegation_token', exceptions) ->
  {struct, [{1, {struct, {'hive_metastore_types', 'metaException'}}}]}
;
% cancel_delegation_token(This, Token_str_form)
function_info('cancel_delegation_token', params_type) ->
  {struct, [{1, string}]}
;
function_info('cancel_delegation_token', reply_type) ->
  {struct, []};
function_info('cancel_delegation_token', exceptions) ->
  {struct, [{1, {struct, {'hive_metastore_types', 'metaException'}}}]}
;
function_info(Function, InfoType) ->
  facebookService_thrift:function_info(Function, InfoType).

