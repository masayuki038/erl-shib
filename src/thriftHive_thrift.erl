%%
%% Autogenerated by Thrift Compiler (0.9.0)
%%
%% DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
%%

-module(thriftHive_thrift).
-behaviour(thrift_service).


-include("thriftHive_thrift.hrl").

-export([struct_info/1, function_info/2]).

struct_info('i am a dummy struct') -> undefined.
%%% interface
% execute(This, Query)
function_info('execute', params_type) ->
  {struct, [{1, string}]}
;
function_info('execute', reply_type) ->
  {struct, []};
function_info('execute', exceptions) ->
  {struct, [{1, {struct, {'hive_service_types', 'hiveServerException'}}}]}
;
% fetchOne(This)
function_info('fetchOne', params_type) ->
  {struct, []}
;
function_info('fetchOne', reply_type) ->
  string;
function_info('fetchOne', exceptions) ->
  {struct, [{1, {struct, {'hive_service_types', 'hiveServerException'}}}]}
;
% fetchN(This, NumRows)
function_info('fetchN', params_type) ->
  {struct, [{1, i32}]}
;
function_info('fetchN', reply_type) ->
  {list, string};
function_info('fetchN', exceptions) ->
  {struct, [{1, {struct, {'hive_service_types', 'hiveServerException'}}}]}
;
% fetchAll(This)
function_info('fetchAll', params_type) ->
  {struct, []}
;
function_info('fetchAll', reply_type) ->
  {list, string};
function_info('fetchAll', exceptions) ->
  {struct, [{1, {struct, {'hive_service_types', 'hiveServerException'}}}]}
;
% getSchema(This)
function_info('getSchema', params_type) ->
  {struct, []}
;
function_info('getSchema', reply_type) ->
  {struct, {'hive_metastore_types', 'schema'}};
function_info('getSchema', exceptions) ->
  {struct, [{1, {struct, {'hive_service_types', 'hiveServerException'}}}]}
;
% getThriftSchema(This)
function_info('getThriftSchema', params_type) ->
  {struct, []}
;
function_info('getThriftSchema', reply_type) ->
  {struct, {'hive_metastore_types', 'schema'}};
function_info('getThriftSchema', exceptions) ->
  {struct, [{1, {struct, {'hive_service_types', 'hiveServerException'}}}]}
;
% getClusterStatus(This)
function_info('getClusterStatus', params_type) ->
  {struct, []}
;
function_info('getClusterStatus', reply_type) ->
  {struct, {'hive_service_types', 'hiveClusterStatus'}};
function_info('getClusterStatus', exceptions) ->
  {struct, [{1, {struct, {'hive_service_types', 'hiveServerException'}}}]}
;
% getQueryPlan(This)
function_info('getQueryPlan', params_type) ->
  {struct, []}
;
function_info('getQueryPlan', reply_type) ->
  {struct, {'queryplan_types', 'queryPlan'}};
function_info('getQueryPlan', exceptions) ->
  {struct, [{1, {struct, {'hive_service_types', 'hiveServerException'}}}]}
;
% clean(This)
function_info('clean', params_type) ->
  {struct, []}
;
function_info('clean', reply_type) ->
  {struct, []};
function_info('clean', exceptions) ->
  {struct, []}
;
function_info(Function, InfoType) ->
  thriftHiveMetastore_thrift:function_info(Function, InfoType).

